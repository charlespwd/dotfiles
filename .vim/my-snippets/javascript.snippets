snippet ngcontroller
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.controller('${2:Controller}Controller', $2Controller);

	/* @ngInject */
	function $2Controller(${3:dependencies}) {
		var ctrl = this;
		ctrl.title = '$2Controller';

		activate();

		////////////////

		function activate() {

		}
	}
})();
endsnippet

snippet ngdirective
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.directive('${2:directive}', $2);

	/* @ngInject */
	function $2(${3:dependencies}) {
		// Usage:
		//
		// Creates:
		//
		var directive = {
			bindToController: true,
			controller: ${4:Controller},
			controllerAs: '${5:vm}',
			link: link,
			restrict: 'A',
			scope: {
			}
		};
		return directive;

		function link(scope, element, attrs) {
		}
	}

	/* @ngInject */
	function $4() {

	}
})();
endsnippet

snippet ngdirectivemodel
(function() {
	'use strict';

	angular
		.module('${1:interactiveVideo.components}')
		.directive('${2:directiveName}', $2);

	/* @ngInject */
	function $2() {
		var directive = {
			controllerAs: '${3:alias}',
			require: 'ngModel',
			replace: true,
			template: ${4:'<div></div>'},
			restrict: 'E',
			link: link,
			scope: true,
		};
		return directive;

		function link(scope, el, attr, ctrl) {
			// directive -> ngModel
			scope.$watch('$3', function($3) {
				ctrl.$setViewValue($3);
			}, true);

			// ngModel -> directive
			ctrl.$render = function() {
				var modelValue = ctrl.$viewValue;
			};
		}
	}
})();
endsnippet

snippet ngfactory
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.factory('${2:factory}', $2);

	/* @ngInject */
	function $2(${3:dependencies}) {
		var service = {
			${4:func}: $4
		};
		return service;

		////////////////

		function $4() {
		}
	}
})();
endsnippet

snippet ngfilter
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.filter('${2:filter}', $2);

	function $2() {
		return $2Filter;

		////////////////

		function $2Filter(${3:params}) {
			return $3;
		};
	}
})();
endsnippet

snippet ngmodule
(function() {
	'use strict';

	angular
		.module('${1:module}', [
			'${2:dependencies}'
		]);
})();
endsnippet

snippet ngconstant
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.contant('${2:CONSTANT}', ${3});
})();
endsnippet

snippet ngservice
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.service('${2:Service}', $2);

	/* @ngInject */
	function $2(${3:dependencies}) {
		this.${4:func} = $4;

		////////////////

		function $4() {
		}
	}
})();
endsnippet

snippet closure
(function() {
	'use strict';

	${1}
})();
endsnippet

snippet fn "a lambda" i
function(${1:x}) {
	return ${2:$1};
}
endsnippet

snippet log
console.log(${1});
endsnippet

snippet recomponent
import React, { Component, PropTypes } from 'react';

class ${1:Class} extends Component {
	static propTypes = {}

	render() {
		return (
			${2}
		);
	}
}

export default $1;
endsnippet

snippet component
class ${1:Class} extends React.Component {
	render() {
		return (
			${2}
		);
	}
}
endsnippet

snippet pt
PropTypes.${1:object}
endsnippet

snippet ptr
PropTypes.${1:object}.isRequired${2}
endsnippet

snippet ngi
/* @ngInject */
endsnippet

snippet qdef
var deferred = $q.defer();
return deferred.promise;
endsnippet

snippet ngfn
/* @ngInject */
function ${1:fnName}(${2:arguments}) {
	${3}
}
endsnippet

snippet ngdescribers
/* jshint expr:true */
'use strict';

describe('Unit: ${1:Unit}', function() {
	var $rootScope, scope, $3;
	beforeEach(module('${2:app}'));

	beforeEach(inject(function($injector) {
		$rootScope = $injector.get('$rootScope');
		scope = $rootScope.$new();

		${3:service} = $injector.get('$3');
	}));

	it('${4:should exist}', function() {
		scope.$digest();
		expect($3).to.exist;
	});
});
endsnippet

snippet ngdescribe
/* jshint expr:true */
'use strict';

describe('Unit: ${1:Unit}', function() {
	var $rootScope, $3;

	beforeEach(config);
	beforeEach(inject(injections));

	it('${4:should exist}', function() {
		expect($3).${5:to.exist};
	});

	function config() {
		module('${2}');
	}

	function injections($injector) {
		$rootScope = $injector.get('$rootScope');
		${3:service} = $injector.get('$3');
	}
});
endsnippet

snippet ngdescribectrl
/* jshint expr:true */
'use strict';

describe('Unit: ${1:Unit}', function() {
	var $rootScope, $controller, scope, ctrl;

	beforeEach(config);
	beforeEach(inject(injections));

	it('${4:should exist}', function() {
		${5:expect(ctrl).toBeDefined();}
	});

	function config() {
		module('${2:module}');
	}

	function injections($injector) {
		$rootScope = $injector.get('$rootScope');
		$controller = $injector.get('$controller');
		scope = $rootScope.$new();

		ctrl = $controller('$1', {
			$scope: scope,
		});

		scope.${3:controllerAs} = ctrl;
	}
});
endsnippet

snippet inj
${1:foo} = $injector.get('$1');
endsnippet

snippet esdescribe
'use strict';

import chai from 'chai';
import sinon from 'sinon';
import sinonChai from 'sinon-chai';
chai.use(sinonChai);

import ${1:Something} from '${2:../src/}';

describe('Unit: $1', () => {
	it('should exist', () => {
		expect($1).to.exist;
	});
});
endsnippet

snippet edesc
describe('${1}', () => {
	${2}
});
endsnippet

snippet it
it('should ${1:do something}', function() {
	${2}
});
endsnippet

snippet itt
it('should ${1:do something}', () => {
	${2}
});
endsnippet

snippet ()
() => {
	${1}
}
endsnippet

snippet ebeforeEach
beforeEach(() => {
	${1}
});
endsnippet

snippet ebefore
before(() => {
	${1}
});
endsnippet

snippet eafterEach
afterEach(() => {
	${1}
});
endsnippet

snippet eafter
after(() => {
	${1}
});
endsnippet

snippet emodule
'use strict';

export default class ${1:MyClass} {
	constructor() {
		${2}
	}
}
endsnippet

snippet afterhttp
afterEach(function() {
	$httpBackend.verifyNoOutstandingExpectation();
	$httpBackend.verifyNoOutstandingRequest();
});
endsnippet

snippet webpack-babel
'use strict';

var webpack = require('webpack');

var babelLoader = {
	test: /\.js$/,
	exclude: /node_modules/,
	loader: 'babel',
	query: {
		optional: ['runtime'], // so you don't inject helpers in every file
		stage: 0 // get newer features
	}
};

module.exports = {

	// where your app starts
	entry: './${1:app.js}.js',

	// compiled
	output: {
		filename: './${2:bundle}.js'
	},

	// inline source-maps
	devtool: 'inline-source-map',

	// loaders
	module: {
		loaders: [
			babelLoader
		]
	}
};
endsnippet

snippet sass-loader
{
	// SASS LOADER
	// remember to
	// npm i -D style-loader css-loader autoprefixer-loader sass-loader
	test: /\.scss$/,
	loader: 'style!css!autoprefixer!sass',
}
endsnippet

snippet req
var ${1:module} = require('${2:$1}');
endsnippet

snippet jdescribe
/* eslint-env jasmine */

import ${1:Module} from './${2:$1}';

describe('Unit: $2', () => {
	it('should exist', () => {
		expect($1).toBeDefined();
	});
});
endsnippet

snippet creq
const ${1:module} = require('${2:$1}');
endsnippet

snippet lreq
let ${1:module} = require('${2:$1}');
endsnippet

snippet imp 
import ${1:module} from '${2:$1}';
endsnippet

snippet desc
describe('${1}', function() {

});
endsnippet

snippet xp
expect(${1:module}).${2:toBeDefined()};
endsnippet

snippet ngxpg
$httpBackend.expect${3:GET}(${1}).respond(${2});
endsnippet

snippet flush
$httpBackend.flush();
endsnippet

snippet FN "function" i
function ${1:name}(${2:args}) {
	${3}
}
endsnippet

snippet bc "bower component" i
'bower_components/${1:angular}/${2:$1}.js'
endsnippet

snippet b4inj
beforeEach(inject(function($injector) {
	${1}
}));
endsnippet

snippet b4e
beforeEach(function() {
	${1}
});
endsnippet

snippet afe
afterEach(function() {
	${1}
});
endsnippet

snippet itinj
it('${1}', inject(function() {
	${2}
}));
endsnippet

snippet ngconfig
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.config(${2:config});

	/* @ngInject */
	function $2(${3:dependencies}) {
		${4}
	}
})();
endsnippet

snippet ppty
Object.defineProperty(${1:obj}, '${2:ppty}', {
	${3}
});
endsnippet

snippet ppties
Object.defineProperties(${1:obj}, {
	'${2:ppty}': {
		${3}
	},
});
endsnippet

snippet clj
console.log(JSON.stringify(${1}, null, 2))
endsnippet
