#!/bin/bash
set -eou pipefail

session="build"
project_name=${1:-}
mode=${2:-}
dev=/opt/dev/bin/dev
TMUX=${TMUX:-''}

is_in_session() {
  [[ -n $TMUX ]] && [[ $(tmux display-message -p '#S') = "$session" ]];
  return
}

window_exists() {
  tmux
}

create_and_start() {
  name="$1"
  cmd="$2"
  target="$session:$name"
  echo "$cmd"

  if (tmux select-window -t "$target" &> /dev/null); then
    if [[ $name = 'start/redis' ]]; then
      return;
    fi
    tmux send-keys -t "$target" C-c
    sleep 1
  else
    tmux new-window -t "$session" -n "$name"
  fi

  tmux send-keys -t "$target" "$cmd" Enter
}

kill_window() {
  name="$session:$1"
  echo "Killing window $name"
  tmux kill-window -t "$name" || true
}

start_all_servers() {
  local integrations="$(
    cd $HOME/src/github.com/Shopify/$1 && \
    $dev integration status \
      | grep enabled \
      | tr -s " " \
      | cut -d' ' -f1
  )"
  start_server $1
  for integration in $(echo $integrations); do
    start_server $integration
  done
}

start_server() {
  name="start/$1"
  mode="${2:-}"
  if [[ $mode = 'kill' ]]; then
    kill_window $name
  else
    # up & running
    if $dev sv status | grep -q "$1"; then
      create_and_start "$name" \
        "dev cd $1 && dev sv logs -n 100 -f $1"
    # up but not running
    elif railgun status -a -o 'name' -H | grep -q "$1"; then
      create_and_start "$name" \
        "dev cd $1 && dev sv start && dev sv logs -n 100 -f $1"
    # not up, not running
    else
      create_and_start "$name" \
        "dev cd $1 && dev up && dev sv start && dev sv logs -n 100 -f $1"
    fi
  fi
}

start_simplified() {
  root="$HOME/ws/simplified/simplified.dev"
  name="start/simplified"
  if [[ $mode = 'kill' ]]; then
    kill_window "$name"
  elif [[ $mode = 'build' ]]; then
    create_and_start "$name" \
      "cd $root && yarn start:build" &
  else
    create_and_start "$name" \
      'yarn develop' &
  fi
}

start_nginx() {
  if [[ $mode = 'kill' ]]; then
    kill_window "start/nginx"
    systemctl stop cache-buster.service
    systemctl stop nginx
  else
    echo systemctl restart nginx
    systemctl restart nginx cache-buster.service
    create_and_start 'start/nginx' \
     'tail -f /etc/nginx/logs/access.log' &
  fi
}

# start session
(tmux has-session -t $session &> /dev/null) || tmux new -s $session -d

if is_in_session; then
  tmux rename-window 'sb/vim'
fi

run() {
  project_name=${1:-}
  mode=${2:-}
  shift 1

  case $project_name in
    all)
      start_all_servers "$@"
      ;;
    core|shopify)
      start_server shopify $mode
      ;;
    server|se*)
      start_server "$@"
      ;;
    simplified|si*)
      start_simplified
      ;;
    nginx)
      start_nginx
      ;;
    kill)
      for p in "$@"; do
        run $p kill
      done
      ;;
    start)
      args="${@:-comp aldo redis}"
      for p in $(echo "$args"); do
        run $p
      done
      ;;
    *)
      echo -e "Error: project name $project_name not supported."
      exit 1
      ;;
  esac
}

run "$@"

if is_in_session; then
  tmux select-window -t 'sb/vim'
  tmux send-keys -t 'sb/vim' 'exit' Enter
fi

echo 'All done!'
