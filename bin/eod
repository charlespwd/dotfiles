#!/bin/env node

const program = require("commander");
const moment = require("moment");
const chrono = require('chrono-node');
const path = require("path");
const fs = require("fs");
const R = require("ramda");
const filename = path.join(process.env.XDG_CONFIG_HOME, "aldo-vpn.log");
const filecontents = fs.readFileSync(filename, "utf8");
const today = moment().startOf("day");
const entries = filecontents
  .split("\n")
  .map(entry => moment(entry))
  .filter(entry => entry.isValid())
  .filter(date => date.isAfter(today));
const firstEntry = entries[0];

program
  .version("1.0.0")
  .option("-r, --remote", "Working remotely")
  .option("-e, --early", "Might finish before 3")
  .option("-w, --workout", "Working remotely")
  .option("-s, --sod", "Print start of day")
  .option("-0, --since", "Since Start of day")
  .option("-b, --begin [time]", "Beginning of day")
  .option("-p, --plus [value]", "Add time")
  .option("-m, --minus [value]", "Sub time")
  .parse(process.argv);

let eod = moment()
      .startOf("day")
      .add("7", "h")
      .add("8", "h");

if (firstEntry) {
  eod = firstEntry.clone().add(8, "h")
}

if (program.begin) {
  eod = moment(chrono.parseDate(program.begin)).add(8, 'h');
}

if (program.sod) {
  console.log(firstEntry.format("hh:mm a"));
  process.exit(0);
}

if (!program.remote) eod.add(80, "m");
if (program.early) eod.subtract(25, "m");
if (program.workout) eod.add(1, "h").add(15, "m");
if (program.plus) {
  const [, val, time] = R.match(/^([0-9.]+)(.*)$/, program.plus);
  eod.add(val, time);
}
if (program.minus) {
  const [, val, time] = R.match(/^([0-9.]+)(.*)$/, program.minus);
  eod.subtract(val, time);
}

if (program.since) {
  const now = moment();
  const diff = moment.duration(now.diff(firstEntry));
  if (!program.remote) diff.subtract(25, "m");
  console.log(Math.round(diff.asHours() * 4) / 4);
  process.exit(0);
}

console.log(eod.format("hh:mm a"));
